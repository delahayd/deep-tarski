include "../tarski_term_def.zf".
#all_coplanar
assert[name "Labelall_coplanar"] forall (A B C D : point). Coplanar A B C D.
#col_permutation_3
assert[name "Labelcol_permutation_3"] forall (A B C : point). Col A B C => Col C B A.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#midpoint_col
assert[name "Labelmidpoint_col"] forall (A M B : point). Midpoint M A B => Col M A B.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#l4_18
assert[name "Labell4_18"] forall (A B C C1 : point). A!=B => Col A B C => Cong A C A C1 => Cong B C B C1 => C=C1.
#col_trivial_3
assert[name "Labelcol_trivial_3"] forall (A B : point). Col A B A.
#l4_17
assert[name "Labell4_17"] forall (A B C P Q : point). A!=B => Col A B C => Cong A P A Q => Cong B P B Q => Cong C P C Q.
#le_bet
assert[name "Labelle_bet"] forall (A B C D : point). Le C D A B => (exists (X : point). Bet A X B && Cong A X C D).
#l2_11
assert[name "Labell2_11"] forall (A B C A1 B1 C1 : point). Bet A B C => Bet A1 B1 C1 => Cong A B A1 B1 => Cong B C B1 C1 => Cong A C A1 C1.
#l7_3
assert[name "Labell7_3"] forall (M A : point). Midpoint M A A => M=A.
#cong_4321
assert[name "Labelcong_4321"] forall (A B C D : point). Cong A B C D => Cong D C B A.
#cong_right_commutativity
assert[name "Labelcong_right_commutativity"] forall (A B C D : point). Cong A B C D => Cong A B D C.
#cong_commutativity
assert[name "Labelcong_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A D C.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#cong_diff_2
assert[name "Labelcong_diff_2"] forall (A B C D : point). B!=A => Cong A B C D => C!=D.
#cong_reflexivity
assert[name "Labelcong_reflexivity"] forall (A B : point). Cong A B A B.
#l5_6
assert[name "Labell5_6"] forall (A B C D A1 B1 C1 D1 : point). Le A B C D => Cong A B A1 B1 => Cong C D C1 D1 => Le A1 B1 C1 D1.
#l6_13_2
assert[name "Labell6_13_2"] forall (P A B : point). Out P A B => Bet P A B => Le P A P B.
#bet_col
assert[name "Labelbet_col"] forall (A B C : point). Bet A B C => Col A B C.
#midpoint_distinct_2
assert[name "Labelmidpoint_distinct_2"] forall (I A B : point). I!=A => Midpoint I A B => A!=B && I!=B.
#construction_uniqueness
assert[name "Labelconstruction_uniqueness"] forall (Q A B C X Y : point). Q!=A => Bet Q A X => Cong A X B C => Bet Q A Y => Cong A Y B C => X=Y.
#swap_diff
assert[name "Labelswap_diff"] forall (A B : point). A!=B => B!=A.
#between_cong_2
assert[name "Labelbetween_cong_2"] forall (A B D E : point). Bet A D E => Bet A E D => Cong A D A E => D=E.
#symmetric_point_uniqueness
assert[name "Labelsymmetric_point_uniqueness"] forall (A P P1 P2 : point). Midpoint P A P1 => Midpoint P A P2 => P1=P2.
#l7_20
assert[name "Labell7_20"] forall (M A B : point). Col A M B => Cong M A M B => A=B || Midpoint M A B.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#cong_transitivity
assert[name "Labelcong_transitivity"] forall (A B C D E F : point). Cong A B C D => Cong C D E F => Cong A B E F.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#l4_3
assert[name "Labell4_3"] forall (A B C A1 B1 C1 : point). Bet A B C => Bet A1 B1 C1 => Cong A C A1 C1 => Cong B C B1 C1 => Cong A B A1 B1.
#col_permutation_4
assert[name "Labelcol_permutation_4"] forall (A B C : point). Col A B C => Col B A C.
#cong_left_commutativity
assert[name "Labelcong_left_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A C D.
#segment_construction
assert[name "Labelsegment_construction"] forall (A B C D : point). exists (E :point). Bet A B E && Cong B E C D.
#l7_17
assert[name "Labell7_17"] forall (P P1 A B : point). Midpoint A P P1 => Midpoint B P P1 => A=B.
#five_segment
assert[name "Labelfive_segment"] forall (A B C D A1 B1 C1 D1 : point). Cong A B A1 B1 => Cong B C B1 C1 => Cong A D A1 D1 => Cong B D B1 D1 => Bet A B C => Bet A1 B1 C1 => A!=B => Cong C D C1 D1.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#cong_identity
assert[name "Labelcong_identity"] forall (A B C : point). Cong A B C C => A = B.
#between_identity
assert[name "Labelbetween_identity"] forall (A B : point). Bet A B A => A=B.
rewrite[name "LabelMidpoint"] forall (M A B : point). Midpoint M A B <=> Bet A M B && Cong A M M B.
goal forall (A B C X : point). Per A X C => X!=C => Per B X C => Col A B X.