include "../tarski_term_def.zf".
#conga_preserves_lta
assert[name "Labelconga_preserves_lta"] forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). CongA A B C A1 B1 C1 => CongA D E F D1 E1 F1 => LtA A B C D E F => LtA A1 B1 C1 D1 E1 F1.
#l11_16
assert[name "Labell11_16"] forall (A B C A1 B1 C1 : point). Per A B C => A!=B => C!=B => Per A1 B1 C1 => A1!=B1 => C1!=B1 => CongA A B C A1 B1 C1.
#l11_43
assert[name "Labell11_43"] forall (A B C : point). ~Col A B C => (Per B A C || Obtuse B A C) => Acute A B C && Acute A C B.
#lta_right_comm
assert[name "Labellta_right_comm"] forall (A B C D E F : point). LtA A B C D E F => LtA A B C F E D.
#col_permutation_1
assert[name "Labelcol_permutation_1"] forall (A B C : point). Col A B C => Col B C A.
#lta_trans
assert[name "Labellta_trans"] forall (A B C A1 B1 C1 A2 B2 C2 : point). LtA A B C A1 B1 C1 => LtA A1 B1 C1 A2 B2 C2 => LtA A B C A2 B2 C2.
#lta_diff
assert[name "Labellta_diff"] forall (A B C D E F : point). LtA A B C D E F => LtA A B C D E F && A!=B && C!=B && D!=E && F!=E.
#lta_left_comm
assert[name "Labellta_left_comm"] forall (A B C D E F : point). LtA A B C D E F => LtA C B A D E F.
#lt_right_comm
assert[name "Labellt_right_comm"] forall (A B C D : point). Lt A B C D => Lt A B D C.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#conga_refl
assert[name "Labelconga_refl"] forall (A B C : point). A!=B => C!=B => CongA A B C A B C.
#l11_44_2_b
assert[name "Labell11_44_2_b"] forall (A B C : point). ~Col A B C => LtA B A C B C A => Lt B C B A.
#lt_left_comm
assert[name "Labellt_left_comm"] forall (A B C D : point). Lt A B C D => Lt B A C D.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
rewrite[name "LabelAcute"] forall (A B C : point). Acute A B C <=> (exists (A1 B1 C1 : point). Per A1 B1 C1 && LtA A B C A1 B1 C1).
rewrite[name "LabelObtuse"] forall (A B C : point). Obtuse A B C <=> (exists (A1 B1 C1 : point). Per A1 B1 C1 && GtA A B C A1 B1 C1).
rewrite[name "LabelGtA"] forall (A B C D E F : point). GtA A B C D E F <=> LtA D E F A B C.
goal forall (A B C : point). ~Col A B C => (Per A B C || Obtuse A B C) => Lt B A A C && Lt B C A C.