include "../tarski_term_def.zf".
#in_angle_trivial_1
assert[name "Labelin_angle_trivial_1"] forall (A B C : point). A!=B => C!=B => InAngle A A B C.
#perp_in_perp_bis
assert[name "Labelperp_in_perp_bis"] forall (A B C D X : point). Perp_at X A B C D => Perp X B C D || Perp A X C D.
#out_conga_out
assert[name "Labelout_conga_out"] forall (A B C D E F : point). Out B A C => CongA A B C D E F => Out E D F.
#perp_comm
assert[name "Labelperp_comm"] forall (A B C D : point). Perp A B C D => Perp B A D C.
#ex_per_cong
assert[name "Labelex_per_cong"] forall (A B C D X Y : point). A!=B => X!=Y => Col A B C => ~Col A B D => (exists (P : point). Per P C A && Cong P C X Y && OS A B P D).
#cong_diff_3
assert[name "Labelcong_diff_3"] forall (A B C D : point). C!=D => Cong A B C D => A!=B.
#out_col
assert[name "Labelout_col"] forall (A B C : point). Out A B C => Col A B C.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#perp_not_eq_1
assert[name "Labelperp_not_eq_1"] forall (A B C D : point). Perp A B C D => A!=B.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#conga_refl
assert[name "Labelconga_refl"] forall (A B C : point). A!=B => C!=B => CongA A B C A B C.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#per_perp_in
assert[name "Labelper_perp_in"] forall (A B C : point). A!=B => B!=C => Per A B C => Perp_at B A B B C.
#perp_not_col
assert[name "Labelperp_not_col"] forall (A B P : point). Perp A B P A => ~Col A B P.
#not_col_exists
assert[name "Labelnot_col_exists"] forall (A B : point). A!=B => (exists (C : point). ~Col A B C).
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
rewrite[name "LabelAcute"] forall (A B C : point). Acute A B C <=> (exists (A1 B1 C1 : point). Per A1 B1 C1 && LtA A B C A1 B1 C1).
rewrite[name "LabelLeA"] forall (A B C D E F : point). LeA A B C D E F <=> (exists (P : point). InAngle P D E F && CongA A B C D E P).
rewrite[name "LabelLtA"] forall (A B C D E F : point). LtA A B C D E F <=> LeA A B C D E F && ~ CongA A B C D E F.
goal forall (A B : point). A!=B => Acute A B A.