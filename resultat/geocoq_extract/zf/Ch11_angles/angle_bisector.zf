include "../tarski_term_def.zf".
#out_conga
assert[name "Labelout_conga"] forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). CongA A B C A1 B1 C1 => Out B A A0 => Out B C C0 => Out B1 A1 A2 => Out B1 C1 C2 => CongA A0 B C0 A2 B1 C2.
#perp_distinct
assert[name "Labelperp_distinct"] forall (A B C D : point). Perp A B C D => A!=B && C!=D.
#midpoint_col
assert[name "Labelmidpoint_col"] forall (A M B : point). Midpoint M A B => Col M A B.
#l6_11_existence
assert[name "Labell6_11_existence"] forall (A B C R : point). R!=A => B!=C => (exists (X : point). Out A X R && Cong A X B C).
#l11_21_b
assert[name "Labell11_21_b"] forall (A B C A1 B1 C1 : point). Out B A C => Out B1 A1 C1 => CongA A B C A1 B1 C1.
#perp_left_comm
assert[name "Labelperp_left_comm"] forall (A B C D : point). Perp A B C D => Perp B A C D.
#cong_left_commutativity
assert[name "Labelcong_left_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A C D.
#not_bet_out
assert[name "Labelnot_bet_out"] forall (A B C : point). Col A B C => ~Bet A B C => Out B A C.
#between_trivial
assert[name "Labelbetween_trivial"] forall (A B : point). Bet A B B.
#bet_neq12__neq
assert[name "Labelbet_neq12__neq"] forall (A B C : point). Bet A B C => A!=B=>A!=C.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#perp_in_sym
assert[name "Labelperp_in_sym"] forall (A B C D X : point). Perp_at X A B C D => Perp_at X C D A B.
#in_angle_line
assert[name "Labelin_angle_line"] forall (A B C P : point). P!=B => A!=B => C!=B => Bet A B C => InAngle P A B C.
#col_permutation_4
assert[name "Labelcol_permutation_4"] forall (A B C : point). Col A B C => Col B A C.
#midpoint_distinct_1
assert[name "Labelmidpoint_distinct_1"] forall (I A B : point). A!=B => Midpoint I A B => I!=A && I!=B.
#l11_25
assert[name "Labell11_25"] forall (P A B C A1 C1 P1 : point). InAngle P A B C => Out B A1 A => Out B C1 C => Out B P P1 => InAngle P1 A1 B C1.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#midpoint_bet
assert[name "Labelmidpoint_bet"] forall (A B C : point). Midpoint B A C => Bet A B C.
#l11_51
assert[name "Labell11_51"] forall (A B C A1 B1 C1 : point). A!=B => A!=C => B!=C => Cong A B A1 B1 => Cong A C A1 C1 => Cong B C B1 C1 => CongA B A C B1 A1 C1 && CongA A B C A1 B1 C1 && CongA B C A B1 C1 A1.
#cong_reflexivity
assert[name "Labelcong_reflexivity"] forall (A B : point). Cong A B A B.
#cong_diff_4
assert[name "Labelcong_diff_4"] forall (A B C D : point). D!=C => Cong A B C D => A!=B.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#perp_in_per
assert[name "Labelperp_in_per"] forall (A B C : point). Perp_at B A B B C => Per A B C.
#l11_18_1
assert[name "Labell11_18_1"] forall (A B C D : point). Bet C B D => B!=C => B!=D => A!=B => Per A B C => CongA A B C A B D.
#perp_perp_in
assert[name "Labelperp_perp_in"] forall (A B C : point). Perp A B C A => Perp_at A A B C A.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#bet_dec
assert[name "Labelbet_dec"] forall (A B C : point). Bet A B C || ~Bet A B C.
#l6_6
assert[name "Labell6_6"] forall (P A B : point). Out P A B => Out P B A.
#midpoint_existence
assert[name "Labelmidpoint_existence"] forall (A B : point). (exists (X : point). Midpoint X A B).
#out_col
assert[name "Labelout_col"] forall (A B C : point). Out A B C => Col A B C.
#midpoint_cong
assert[name "Labelmidpoint_cong"] forall (A B C : point). Midpoint B A C => Cong A B B C.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#not_col_exists
assert[name "Labelnot_col_exists"] forall (A B : point). A!=B => (exists (C : point). ~Col A B C).
#l10_15
assert[name "Labell10_15"] forall (A B C P : point). Col A B C => ~Col A B P => (exists (Q : point). Perp A B Q C && OS A B P Q).
goal forall (A B C : point). A!=B => C!=B => (exists (P : point). InAngle P A B C && CongA P B A P B C).