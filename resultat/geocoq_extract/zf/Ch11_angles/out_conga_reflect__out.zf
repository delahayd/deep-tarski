include "../tarski_term_def.zf".
#out_conga
assert[name "Labelout_conga"] forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). CongA A B C A1 B1 C1 => Out B A A0 => Out B C C0 => Out B1 A1 A2 => Out B1 C1 C2 => CongA A0 B C0 A2 B1 C2.
#conga_sym
assert[name "Labelconga_sym"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A B C.
#conga_trans
assert[name "Labelconga_trans"] forall (A B C A1 B1 C1 A2 B2 C2 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A2 B2 C2 => CongA A B C A2 B2 C2.
#l11_18_2
assert[name "Labell11_18_2"] forall (A B C D : point). Bet C B D => CongA A B C A B D => Per A B C.
#out_distinct
assert[name "Labelout_distinct"] forall (A B C : point). Out A B C => B!=A && C!=A.
#l9_2
assert[name "Labell9_2"] forall (A B P Q : point). TS A B P Q => TS A B Q P.
#is_image_spec_rev
assert[name "Labelis_image_spec_rev"] forall (P P1 A B : point). ReflectL P P1 A B => ReflectL P P1 B A.
#invert_two_sides
assert[name "Labelinvert_two_sides"] forall (A B P Q : point). TS A B P Q => TS B A P Q.
#conga__or_out_ts
assert[name "Labelconga__or_out_ts"] forall (A B C C1 : point). CongA A B C A B C1 => Out B C C1 || TS A B C C1.
#col_conga_col
assert[name "Labelcol_conga_col"] forall (A B C D E F : point). Col A B C => CongA A B C D E F => Col D E F.
#conga_distinct
assert[name "Labelconga_distinct"] forall (A B C D E F : point). CongA A B C D E F => CongA A B C D E F && A!=B && C!=B && D!=E && F!=E.
#l10_8
assert[name "Labell10_8"] forall (A B P : point). Reflect P P A B => Col P A B.
#not_bet_out
assert[name "Labelnot_bet_out"] forall (A B C : point). Col A B C => ~Bet A B C => Out B A C.
#per_not_col
assert[name "Labelper_not_col"] forall (A B C : point). A!=B => B!=C => Per A B C => ~Col A B C.
#reflectl__conga
assert[name "Labelreflectl__conga"] forall (A B P P1 : point). A!=B => B!=P => ReflectL P P1 A B => CongA A B P A B P1.
#is_image_is_image_spec
assert[name "Labelis_image_is_image_spec"] forall (P P1 A B : point). A!=B => (Reflect P1 P A B <=> ReflectL P1 P A B ).
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#l10_14
assert[name "Labell10_14"] forall (P P1 A B : point). P!=P1 => A!=B => Reflect P P1 A B => TS A B P P1.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#l6_6
assert[name "Labell6_6"] forall (P A B : point). Out P A B => Out P B A.
#out_col
assert[name "Labelout_col"] forall (A B C : point). Out A B C => Col A B C.
#l9_9_bis
assert[name "Labell9_9_bis"] forall (P Q A B : point). OS P Q A B => ~TS P Q A B.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#l9_8_2
assert[name "Labell9_8_2"] forall (P Q A B C : point). TS P Q A C => OS P Q A B => TS P Q B C.
#invert_one_side
assert[name "Labelinvert_one_side"] forall (A B P Q : point). OS A B P Q => OS B A P Q.
#l6_6
assert[name "Labell6_6"] forall (P A B : point). Out P A B => Out P B A.
#out_col
assert[name "Labelout_col"] forall (A B C : point). Out A B C => Col A B C.
#col_one_side
assert[name "Labelcol_one_side"] forall (A B C P Q : point). Col A B C => A!=C => OS A B P Q => OS A C P Q.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#out_distinct
assert[name "Labelout_distinct"] forall (A B C : point). Out A B C => B!=A && C!=A.
#out_one_side
assert[name "Labelout_one_side"] forall (A B X Y : point). (~Col A B X || ~Col A B Y) => Out A X Y => OS A B X Y.
rewrite[name "LabelTS"] forall (A B P Q : point). TS A B P Q <=> ~(Col P A B) && ~(Col Q A B) && (exists (T : point). Col T A B && Bet P T Q).
goal forall (A B C P T T1 : point). ~Out B A C => CongA P B A P B C => Out B A T => ReflectL T T1 B P => Out B C T1.