include "../tarski_term_def.zf".
#lcos_lg_anga
assert[name "Labellcos_lg_anga"] forall (lp l : point->point->prop) (a : point->point->point->prop).Lcos lp l a => Lcos lp l a && Q_Cong l && Q_Cong lp && Q_CongA_Acute a.
#anga_conga
assert[name "Labelanga_conga"] forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). Q_CongA_Acute a => a A B C => a A1 B1 C1 => CongA A B C A1 B1 C1.
#null_lcos_eql
assert[name "Labelnull_lcos_eql"] forall (lp l : point->point->prop) (a : point->point->point->prop). Lcos lp l a => Q_CongA_Null_Acute a => EqL l lp.
#not_null_not_col
assert[name "Labelnot_null_not_col"] forall (A B C : point) ( a : point->point->point->prop). Q_CongA_Acute a => ~Q_CongA_Null_Acute a => a A B C => ~Col A B C.
#is_null_anga_dec
assert[name "Labelis_null_anga_dec"] forall (a : point->point->point->prop). Q_CongA_Acute a => Q_CongA_Null_Acute a || ~Q_CongA_Null_Acute a.
#conga_comm
assert[name "Labelconga_comm"] forall (A B C D E F : point). CongA A B C D E F => CongA C B A F E D.
#all_eql
assert[name "Labelall_eql"] forall (A B : point) (l1 l2 : point->point->prop). Len A B l1 => Len A B l2 => EqL l1 l2.
#lg_cong_lg
assert[name "Labellg_cong_lg"] forall (A B C D : point) (l : point->point->prop). Q_Cong l => l A B => Cong A B C D => l C D.
#l11_16
assert[name "Labell11_16"] forall (A B C A1 B1 C1 : point). Per A B C => A!=B => C!=B => Per A1 B1 C1 => A1!=B1 => C1!=B1 => CongA A B C A1 B1 C1.
#col_trivial_3
assert[name "Labelcol_trivial_3"] forall (A B : point). Col A B A.
#lg_cong
assert[name "Labellg_cong"] forall (A B C D : point) (l : point->point->prop). Q_Cong l => l A B => l C D => Cong A B C D.
#col_permutation_1
assert[name "Labelcol_permutation_1"] forall (A B C : point). Col A B C => Col B C A.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#anga_distincts
assert[name "Labelanga_distincts"] forall (A B C : point) ( a : point->point->point->prop). Q_CongA_Acute a => a A B C => A!=B && C!=B.
#l11_50_1
assert[name "Labell11_50_1"] forall (A B C A1 B1 C1 : point). ~Col A B C => CongA B A C B1 A1 C1 => CongA A B C A1 B1 C1 => Cong A B A1 B1 => Cong A C A1 C1 && Cong B C B1 C1 && CongA A C B A1 C1 B1.
rewrite[name "LabelLcos"] forall (lb lc : point->point->prop) (a : point->point->point->prop). Lcos lb lc a <=> Q_Cong lb && Q_Cong lc && Q_CongA_Acute a && (exists (A B C : point). (Per C B A && lb A B && lc A C && a B A C)).
goal forall (lp l1 l2 : point->point->prop) (a : point->point->point->prop).Lcos lp l1 a => Lcos lp l2 a => EqL l1 l2.