include "../tarski_term_def.zf".
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#l4_2
assert[name "Labell4_2"] forall (A B C D A1 B1 C1 D1 : point). IFSC A B C D A1 B1 C1 D1 => Cong B D B1 D1.
#cong_right_commutativity
assert[name "Labelcong_right_commutativity"] forall (A B C D : point). Cong A B C D => Cong A B D C.
#cong_commutativity
assert[name "Labelcong_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A D C.
#midpoint_bet
assert[name "Labelmidpoint_bet"] forall (A B C : point). Midpoint B A C => Bet A B C.
#l7_2
assert[name "Labell7_2"] forall (M A B : point). Midpoint M A B => Midpoint M B A.
#cong_reflexivity
assert[name "Labelcong_reflexivity"] forall (A B : point). Cong A B A B.
#construction_uniqueness
assert[name "Labelconstruction_uniqueness"] forall (Q A B C X Y : point). Q!=A => Bet Q A X => Cong A X B C => Bet Q A Y => Cong A Y B C => X=Y.
#per_col
assert[name "Labelper_col"] forall (A B C D : point). B!=C => Per A B C => Col B C D => Per A B D.
#midpoint_cong
assert[name "Labelmidpoint_cong"] forall (A B C : point). Midpoint B A C => Cong A B B C.
#cong_transitivity
assert[name "Labelcong_transitivity"] forall (A B C D E F : point). Cong A B C D => Cong C D E F => Cong A B E F.
#cong_left_commutativity
assert[name "Labelcong_left_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A C D.
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
rewrite[name "LabelCol"] forall (A B C : point). Col A B C <=> Bet A B C || Bet B C A || Bet C A B.
rewrite[name "LabelMidpoint"] forall (M A B : point). Midpoint M A B <=> Bet A M B && Cong A M M B.
rewrite[name "LabelPer"] forall (A B C : point). Per A B C <=> (exists (C1 : point). Midpoint B C C1 && Cong A C A C1).
goal forall (A B C H : point). B!=C => Bet A B C => Cong A H C H => Per H B C => Midpoint B A C.