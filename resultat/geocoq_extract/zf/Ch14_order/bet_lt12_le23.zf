include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#diff_ar2
assert[name "Labeldiff_ar2"] forall (O E E1 A B AMB : point). Diff O E E1 A B AMB => Ar2 O E E1 A B AMB.
#l14_36_a
assert[name "Labell14_36_a"] forall (O E E1 A B C : point). Sum O E E1 A B C => Out O A B => Bet O A C.
#bet_neq12__neq
assert[name "Labelbet_neq12__neq"] forall (A B C : point). Bet A B C => A!=B=>A!=C.
#diff_A_O
assert[name "Labeldiff_A_O"] forall (O E E1 A : point). ~Col O E E1 => Col O E A => Diff O E E1 A O A.
#outer_transitivity_between
assert[name "Labelouter_transitivity_between"] forall (A B C D : point). Bet A B C=> Bet B C D => B!=C => Bet A B D.
#between_equality
assert[name "Labelbetween_equality"] forall (A B C : point). Bet A B C => Bet B A C => A=B.
#diff_sum
assert[name "Labeldiff_sum"] forall (O E E1 A B S : point). Diff O E E1 S A B => Sum O E E1 A B S.
#neg_not_pos
assert[name "Labelneg_not_pos"] forall (O E A : point). Ng O E A => ~Ps O E A.
#between_exchange3
assert[name "Labelbetween_exchange3"] forall (A B C D : point). Bet A B C => Bet A C D => Bet B C D.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#sum_cong
assert[name "Labelsum_cong"] forall (A B C : point). Sum O E E1 A B C => (A!=O || B!=O) => Parallelogram_flat O A B C.
#diff_O_A_opp
assert[name "Labeldiff_O_A_opp"] forall (O E E1 A mA : point). Diff O E E1 O A mA => Opp O E E1 A mA.
#l5_3
assert[name "Labell5_3"] forall (A B C D : point). Bet A B D => Bet A C D => Bet A B C || Bet A C B.
#diff_exists
assert[name "Labeldiff_exists"] forall (O E E1 A B : point). ~Col O E E1 => Col O E A => Col O E B => (exists (D : point). Diff O E E1 A B D).
#O_not_positive
assert[name "LabelO_not_positive"] forall (O E : point). ~Ps O E O.
#sum_uniqueness
assert[name "Labelsum_uniqueness"] forall (A B C1 C2 : point). Sum O E E1 A B C1 => Sum O E E1 A B C2 => C1=C2.
#between_identity
assert[name "Labelbetween_identity"] forall (A B : point). Bet A B A => A=B.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#between_exchange2
assert[name "Labelbetween_exchange2"] forall (A B C D : point). Bet A B D => Bet B C D => Bet A C D.
#l5_2
assert[name "Labell5_2"] forall (A B C D : point). A!=B => Bet A B C => Bet A B D => Bet B C D || Bet B D C.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#between_inner_transitivity
assert[name "Labelbetween_inner_transitivity"] forall (A B C D : point). Bet A B D => Bet B C D => Bet A B C.
#col_pos_or_neg
assert[name "Labelcol_pos_or_neg"] forall (O E X : point). O!=E => O!=X => Col O E X => Ps O E X || Ng O E X.
#not_pos_and_neg
assert[name "Labelnot_pos_and_neg"] forall (O E A : point). ~(Ps O E A && Ng O E A).
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#outer_transitivity_between2
assert[name "Labelouter_transitivity_between2"] forall (A B C D : point). Bet A B C => Bet B C D => B!=C => Bet A C D.
#ps_le
assert[name "Labelps_le"] forall (O E E1 X : point). ~Col O E E1 => Bet O X E || Bet O E X => LeP O E E1 O X.
#ltP_neq
assert[name "LabelltP_neq"] forall (O E E1 A B : point). LtP O E E1 A B => A!=B.
#bet_col
assert[name "Labelbet_col"] forall (A B C : point). Bet A B C => Col A B C.
#diff_uniqueness
assert[name "Labeldiff_uniqueness"] forall (O E E1 A B D1 D2 : point). Diff O E E1 A B D1 => Diff O E E1 A B D2 => D1=D2.
#diff_null_eq
assert[name "Labeldiff_null_eq"] forall (O E E1 A B : point). Diff O E E1 A B O => A=B.
#between_exchange4
assert[name "Labelbetween_exchange4"] forall (A B C D : point). Bet A B C => Bet A C D => Bet A B D.
#ltP_neg
assert[name "LabelltP_neg"] forall (O E E1 A : point). LtP O E E1 A O => Ng O E A.
#opp_neg_pos
assert[name "Labelopp_neg_pos"] forall (O E E1 A MA : point). Ng O E A => Opp O E E1 A MA => Ps O E MA.
#sum_A_O
assert[name "Labelsum_A_O"] forall (A : point). Col O E A => Sum O E E1 A O A.
#col_permutation_3
assert[name "Labelcol_permutation_3"] forall (A B C : point). Col A B C => Col C B A.
#cong_identity
assert[name "Labelcong_identity"] forall (A B C : point). Cong A B C C => A = B.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#outer_transitivity_between2
assert[name "Labelouter_transitivity_between2"] forall (A B C D : point). Bet A B C => Bet B C D => B!=C => Bet A C D.
#between_identity
assert[name "Labelbetween_identity"] forall (A B : point). Bet A B A => A=B.
#cong_4312
assert[name "Labelcong_4312"] forall (A B C D : point). Cong A B C D => Cong D C A B.
#outer_transitivity_between
assert[name "Labelouter_transitivity_between"] forall (A B C D : point). Bet A B C=> Bet B C D => B!=C => Bet A B D.
#col_cong2_bet1
assert[name "Labelcol_cong2_bet1"] forall (A B C D : point). Col A B D => Bet A C B => Cong A B C D => Cong A C B D => Bet C B D.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#between_trivial
assert[name "Labelbetween_trivial"] forall (A B : point). Bet A B B.
#cong_left_commutativity
assert[name "Labelcong_left_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A C D.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#l5_2
assert[name "Labell5_2"] forall (A B C D : point). A!=B => Bet A B C => Bet A B D => Bet B C D || Bet B D C.
#col_cong2_bet2
assert[name "Labelcol_cong2_bet2"] forall (A B C D : point). Col A B D => Bet A C B => Cong A B C D => Cong A D B C => Bet C A D.
#cong_commutativity
assert[name "Labelcong_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A D C.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#bet_cong_eq
assert[name "Labelbet_cong_eq"] forall (A B C D : point). Bet A B C => Bet A C D => Cong B C A D => C=D && A=B.
#between_inner_transitivity
assert[name "Labelbetween_inner_transitivity"] forall (A B C D : point). Bet A B D => Bet B C D => Bet A B C.
#col_permutation_1
assert[name "Labelcol_permutation_1"] forall (A B C : point). Col A B C => Col B C A.
#between_trivial2
assert[name "Labelbetween_trivial2"] forall (A B : point). Bet A A B.
#cong_right_commutativity
assert[name "Labelcong_right_commutativity"] forall (A B C D : point). Cong A B C D => Cong A B D C.
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
rewrite[name "LabelNg"] forall (O E A : point). Ng O E A <=> A != O && E != O && Bet A O E .
goal forall (O E E1 A B C : point). Bet A B C => LtP O E E1 A B => LeP O E E1 B C.