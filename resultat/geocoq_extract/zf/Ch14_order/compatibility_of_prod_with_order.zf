include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#diff_A_O
assert[name "Labeldiff_A_O"] forall (O E E1 A : point). ~Col O E E1 => Col O E A => Diff O E E1 A O A.
#leP_refl
assert[name "LabelleP_refl"] forall (O E E1 A : point). LeP O E E1 A A.
#prod_pos_pos
assert[name "Labelprod_pos_pos"] forall (O E E1 A B AB : point). Ps O E A => Ps O E B => Prod O E E1 A B AB => Ps O E AB.
#prod_O_l_eq
assert[name "Labelprod_O_l_eq"] forall (O E E1 A B C : point). Prodp O E E1 A B C => Prod O E E1 A B C.
#prod_O_r_eq
assert[name "Labelprod_O_r_eq"] forall (A B : point). Col O E A => Col O E B => (exists (C : point). Prod O E E1 A B C).
#diff_uniqueness
assert[name "Labeldiff_uniqueness"] forall (O E E1 A B D1 D2 : point). Diff O E E1 A B D1 => Diff O E E1 A B D2 => D1=D2.
rewrite[name "LabelProd"] forall (O E E1 A B C : point). Prod O E E1 A B C <=> Ar2 O E E1 A B C && (exists (B1 : point). Pj E E1 B B1 && Col O E1 B1 && Pj E1 A B1 C).
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
goal forall (O E E1 A B AB : point). LeP O E E1 O A => LeP O E E1 O B => Prod O E E1 A B AB =>LeP O E E1 O AB.