include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#length_uniqueness
assert[name "Labellength_uniqueness"] forall (O E E1 A B AB AB1 : point). Length O E E1 A B AB => Length O E E1 A B AB1 => AB=AB1.
#distr_l
assert[name "Labeldistr_l"] forall (O E E1 A : point). ~Col O E E1 => Col O E A => Prod O E E1 A O O.
#prod_uniqueness
assert[name "Labelprod_uniqueness"] forall (A B C1 C2 : point). Prod O E E1 A B C1 => Prod O E E1 A B C2 => C1=C2.
#perp_in_sym
assert[name "Labelperp_in_sym"] forall (A B C D X : point). Perp_at X A B C D => Perp_at X C D A B.
#prod_0_l
assert[name "Labelprod_0_l"] forall (O E E1 A B C APC BPC : point). LeP O E E1 A B => Sum O E E1 A C APC => Sum O E E1 B C BPC => LeP O E E1 APC BPC.
#l8_14_2_1b_bis
assert[name "Labell8_14_2_1b_bis"] forall (A B C D X : point). Perp A B C D => Col X A B => Col X C D => Perp_at X A B C D.
#triangular_equality_bis
assert[name "Labeltriangular_equality_bis"] forall (O E E1 A B C AB BC AC : point). (A!=B || C!=B || A!=C) => O!=E => Bet A B C => Length O E E1 A B AB => Length O E E1 B C BC => Length O E E1 A C AC => Sum O E E1 AB BC AC.
#l8_18_existence
assert[name "Labell8_18_existence"] forall (A B C : point). ~Col A B C => (exists (X : point). Col A B X && Perp A B C X).
#sum_O_B
assert[name "Labelsum_O_B"] forall (B : point). Col O E B => Sum O E E1 O B B.
#length_sym
assert[name "Labellength_sym"] forall (O E E1 A B AB : point).Length O E E1 A B AB => Length O E E1 B A AB.
#col_trivial_3
assert[name "Labelcol_trivial_3"] forall (A B : point). Col A B A.
#length_id_2
assert[name "Labellength_id_2"] forall (O E E1 A : point). O!=E => Length O E E1 A A O.
#l8_9
assert[name "Labell8_9"] forall (A B C : point). Per A B C => Col A B C => (A=B || C=B).
#l11_47
assert[name "Labell11_47"] forall (A B C H : point). Per A C B => Perp_at H C H A B => Bet A H B && A!=H && B!=H.
#col_permutation_3
assert[name "Labelcol_permutation_3"] forall (A B C : point). Col A B C => Col C B A.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#perp_in_left_comm
assert[name "Labelperp_in_left_comm"] forall (A B C D X : point). Perp_at X A B C D => Perp_at X B A C D.
#l15_7_1
assert[name "Labell15_7_1"] forall (O E E1 A B C H AB AC AH AC2 : point). O!=E => Per A C B => Perp_at H C H A B => Length O E E1 A B AB => Length O E E1 A C AC => Length O E E1 A H AH => Prod O E E1 AC AC AC2 => Prod O E E1 AB AH AC2.
#sum_A_O
assert[name "Labelsum_A_O"] forall (A : point). Col O E A => Sum O E E1 A O A.
#length_existence
assert[name "Labellength_existence"] forall (O E E1 A B : point). ~Col O E E1 => (exists (AB : point). Length O E E1 A B AB).
#not_col_permutation_5
assert[name "Labelnot_col_permutation_5"] forall (A B C : point). ~Col A B C => ~Col A C B.
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
rewrite[name "LabelProd"] forall (O E E1 A B C : point). Prod O E E1 A B C <=> Ar2 O E E1 A B C && (exists (B1 : point). Pj E E1 B B1 && Col O E1 B1 && Pj E1 A B1 C).
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
goal forall (O E E1 A B C AC BC AB AC2 BC2 AB2 : point). O!=E => Per A C B => Length O E E1 A B AB => Length O E E1 B C BC => Length O E E1 A C AC => Prod O E E1 AC AC AC2 => Prod O E E1 AB AB AB2 => Prod O E E1 BC BC BC2 => Sum O E E1 AC2 BC2 AB2.