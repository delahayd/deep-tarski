include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#diff_ar2
assert[name "Labeldiff_ar2"] forall (O E E1 A B AMB : point). Diff O E E1 A B AMB => Ar2 O E E1 A B AMB.
#diff_A_O
assert[name "Labeldiff_A_O"] forall (O E E1 A : point). ~Col O E E1 => Col O E A => Diff O E E1 A O A.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#cong_sum
assert[name "Labelcong_sum"] forall (A B C : point). O!=C || B!=A => Ar2 O E E1 A B C => Cong O A B C => Cong O B A C => Sum O E E1 A B C.
#sum_cong
assert[name "Labelsum_cong"] forall (A B C : point). Sum O E E1 A B C => (A!=O || B!=O) => Parallelogram_flat O A B C.
#sum_O_B
assert[name "Labelsum_O_B"] forall (B : point). Col O E B => Sum O E E1 O B B.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#sum_comm
assert[name "Labelsum_comm"] forall (A B C : point). Sum O E E1 A B C => Sum O E E1 B A C.
#opp_comm
assert[name "Labelopp_comm"] forall (X Y : point). Opp O E E1 X Y => Opp O E E1 Y X.
#cong_right_commutativity
assert[name "Labelcong_right_commutativity"] forall (A B C D : point). Cong A B C D => Cong A B D C.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#opp0
assert[name "Labelopp0"] Opp O E E1 O O.
#sum_O_B_eq
assert[name "Labelsum_O_B_eq"] forall (B C : point). Sum O E E1 O B C => B=C.
#diff_uniqueness
assert[name "Labeldiff_uniqueness"] forall (O E E1 A B D1 D2 : point). Diff O E E1 A B D1 => Diff O E E1 A B D2 => D1=D2.
#opp_uniqueness
assert[name "Labelopp_uniqueness"] forall (A MA1 MA2 : point). Opp O E E1 A MA1 => Opp O E E1 A MA2 => MA1=MA2.
#cong3_conga
assert[name "Labelcong3_conga"] forall (A B C A1 B1 C1 : point). A!=B => C!=B => Cong_3 A B C A1 B1 C1 => CongA A B C A1 B1 C1.
#bet_neq12__neq
assert[name "Labelbet_neq12__neq"] forall (A B C : point). Bet A B C => A!=B=>A!=C.
#conga_diff56
assert[name "Labelconga_diff56"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => C1!=B1.
#outer_transitivity_between
assert[name "Labelouter_transitivity_between"] forall (A B C D : point). Bet A B C=> Bet B C D => B!=C => Bet A B D.
#not_col_permutation_4
assert[name "Labelnot_col_permutation_4"] forall (A B C : point). ~Col A B C => ~Col B A C.
#col_permutation_4
assert[name "Labelcol_permutation_4"] forall (A B C : point). Col A B C => Col B A C.
#between_exchange3
assert[name "Labelbetween_exchange3"] forall (A B C D : point). Bet A B C => Bet A C D => Bet B C D.
#cong_trivial_identity
assert[name "Labelcong_trivial_identity"] forall (A B : point). Cong A A B B.
#le_anti_symmetry
assert[name "Labelle_anti_symmetry"] forall (A B C D : point). Le A B C D => Le C D A B => Cong A B C D.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#is_midpoint_id
assert[name "Labelis_midpoint_id"] forall (A B : point). Midpoint A A B => A=B.
#col3
assert[name "Labelcol3"] forall (X Y A B C : point). X!=Y => Col X Y A => Col X Y B => Col X Y C => Col A B C.
#col_cong2_bet2
assert[name "Labelcol_cong2_bet2"] forall (A B C D : point). Col A B D => Bet A C B => Cong A B C D => Cong A D B C => Bet C A D.
#cong_diff_2
assert[name "Labelcong_diff_2"] forall (A B C D : point). B!=A => Cong A B C D => C!=D.
#midpoint_existence
assert[name "Labelmidpoint_existence"] forall (A B : point). (exists (X : point). Midpoint X A B).
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#par_not_col_strict
assert[name "Labelpar_not_col_strict"] forall (A B C D P : point). Par A B C D => Col C D P => ~Col A B P => Par_strict A B C D.
#l9_2
assert[name "Labell9_2"] forall (A B P Q : point). TS A B P Q => TS A B Q P.
#par_distinct
assert[name "Labelpar_distinct"] forall (A B C D : point). Par A B C D => A!=B && C!=D.
#cong_diff
assert[name "Labelcong_diff"] forall (A B C D : point). A!=B => Cong A B C D => C!=D.
#symmetric_point_uniqueness
assert[name "Labelsymmetric_point_uniqueness"] forall (A P P1 P2 : point). Midpoint P A P1 => Midpoint P A P2 => P1=P2.
#bet_neq23__neq
assert[name "Labelbet_neq23__neq"] forall (A B C : point). Bet A B C => B!=C=>A!=C.
#cong_transitivity
assert[name "Labelcong_transitivity"] forall (A B C D E F : point). Cong A B C D => Cong C D E F => Cong A B E F.
#par_strict_not_col_2
assert[name "Labelpar_strict_not_col_2"] forall (A B C D : point). Par_strict A B C D => ~Col B C D.
#l9_9
assert[name "Labell9_9"] forall (P Q A B : point). TS P Q A B => ~OS P Q A B.
#two_sides_not_col
assert[name "Labeltwo_sides_not_col"] forall (A B X Y : point). TS A B X Y => ~Col A B X.
#l6_21
assert[name "Labell6_21"] forall (A B C D P Q : point). ~Col A B C => C!=D => Col A B P => Col A B Q => Col C D P => Col C D Q => P=Q.
#l7_3_2
assert[name "Labell7_3_2"] forall (A : point). Midpoint A A A.
#l11_22a
assert[name "Labell11_22a"] forall (A B C P A1 B1 C1 P1 : point). TS B P A C && TS B1 P1 A1 C1 && CongA A B P A1 B1 P1 && CongA P B C P1 B1 C1 => CongA A B C A1 B1 C1.
#cong_3421
assert[name "Labelcong_3421"] forall (A B C D : point). Cong A B C D => Cong C D B A.
#symmetric_point_construction
assert[name "Labelsymmetric_point_construction"] forall (P A : point). exists (P1 : point). Midpoint A P P1.
#conga_right_comm
assert[name "Labelconga_right_comm"] forall (A B C D E F : point). CongA A B C D E F => CongA A B C F E D.
#parallel_uniqueness
assert[name "Labelparallel_uniqueness"] forall (A1 A2 B1 B2 C1 C2 P : point). Par A1 A2 B1 B2 => Col P B1 B2 => Par A1 A2 C1 C2 => Col P C1 C2 => Col C1 B1 B2 && Col C2 B1 B2.
#par_right_comm
assert[name "Labelpar_right_comm"] forall (A B C D : point). Par A B C D => Par A B D C.
#l5_5_2
assert[name "Labell5_5_2"] forall (A B C D : point). (exists (x : point). Bet A B x && Cong A x C D)=> Le A B C D.
#midpoint_distinct_1
assert[name "Labelmidpoint_distinct_1"] forall (I A B : point). A!=B => Midpoint I A B => I!=A && I!=B.
#l7_2
assert[name "Labell7_2"] forall (M A B : point). Midpoint M A B => Midpoint M B A.
#l12_21_a
assert[name "Labell12_21_a"] forall (A B C D : point). TS A C B D => (Par A B C D => CongA B A C D C A).
#par_strict_not_col_4
assert[name "Labelpar_strict_not_col_4"] forall (A B C D : point). Par_strict A B C D => ~Col A B D.
#l12_22_b
assert[name "Labell12_22_b"] forall (A B C D P : point). Out P A C => OS P A B D => CongA B A P D C P => Par A B C D.
#par_left_comm
assert[name "Labelpar_left_comm"] forall (A B C D : point). Par A B C D => Par B A C D.
#col_permutation_2
assert[name "Labelcol_permutation_2"] forall (A B C : point). Col A B C => Col C A B.
#col_cong2_bet1
assert[name "Labelcol_cong2_bet1"] forall (A B C D : point). Col A B D => Bet A C B => Cong A B C D => Cong A C B D => Bet C B D.
#bet_neq32__neq
assert[name "Labelbet_neq32__neq"] forall (A B C : point). Bet A B C => C!=B=>A!=C.
#not_col_exists
assert[name "Labelnot_col_exists"] forall (A B : point). A!=B => (exists (C : point). ~Col A B C).
#l9_19
assert[name "Labell9_19"] forall (X Y A B P : point). X!=Y => Col X Y P => Col A B P => (OS X Y A B <=> (Out P A B && ~Col X Y A)).
#conga_left_comm
assert[name "Labelconga_left_comm"] forall (A B C D E F : point). CongA A B C D E F => CongA C B A D E F.
#out_conga
assert[name "Labelout_conga"] forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). CongA A B C A1 B1 C1 => Out B A A0 => Out B C C0 => Out B1 A1 A2 => Out B1 C1 C2 => CongA A0 B C0 A2 B1 C2.
#all_coplanar
assert[name "Labelall_coplanar"] forall (A B C D : point). Coplanar A B C D.
#l11_14
assert[name "Labell11_14"] forall (A B C A1 C1 : point). Bet A B A1 => A!=B => A1!=B => Bet C B C1 => B!=C => B!=C1 => CongA A B C A1 B C1.
#not_two_sides_id
assert[name "Labelnot_two_sides_id"] forall (A P Q : point). ~TS P Q A A.
#par_strict_left_comm
assert[name "Labelpar_strict_left_comm"] forall (A B C D : point). Par_strict A B C D => Par_strict B A C D.
#l7_3
assert[name "Labell7_3"] forall (M A : point). Midpoint M A A => M=A.
#midpoint_col
assert[name "Labelmidpoint_col"] forall (A M B : point). Midpoint M A B => Col M A B.
#l7_20
assert[name "Labell7_20"] forall (M A B : point). Col A M B => Cong M A M B => A=B || Midpoint M A B.
#outer_pasch
assert[name "Labelouter_pasch"] forall (A B C P Q : point). Bet A C P => Bet B Q C => (exists (X : point). Bet A X B && Bet P Q X).
#conga_comm
assert[name "Labelconga_comm"] forall (A B C D E F : point). CongA A B C D E F => CongA C B A F E D.
#l5_1
assert[name "Labell5_1"] forall (A B C D : point). A!=B => Bet A B C => Bet A B D => Bet A C D || Bet A D C.
#conga_refl
assert[name "Labelconga_refl"] forall (A B C : point). A!=B => C!=B => CongA A B C A B C.
#bet_out
assert[name "Labelbet_out"] forall (A B C : point). B!=A => Bet A B C => Out A B C.
#par_strict_symmetry
assert[name "Labelpar_strict_symmetry"] forall (A B C D : point). Par_strict A B C D => Par_strict C D A B.
#l6_6
assert[name "Labell6_6"] forall (P A B : point). Out P A B => Out P B A.
#par_trans
assert[name "Labelpar_trans"] forall (A1 A2 B1 B2 C1 C2 : point). Par A1 A2 B1 B2 => Par B1 B2 C1 C2 => Par A1 A2 C1 C2.
#between_cong
assert[name "Labelbetween_cong"] forall (A B C : point). Bet A C B => Cong A C A B => C=B.
#invert_two_sides
assert[name "Labelinvert_two_sides"] forall (A B P Q : point). TS A B P Q => TS B A P Q.
#par_comm
assert[name "Labelpar_comm"] forall (A B C D : point). Par A B C D => Par B A D C.
#conga_sym
assert[name "Labelconga_sym"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A B C.
#cong_diff_3
assert[name "Labelcong_diff_3"] forall (A B C D : point). C!=D => Cong A B C D => A!=B.
#l12_6
assert[name "Labell12_6"] forall (A B C D : point). Par_strict A B C D => OS A B C D.
#os_distincts
assert[name "Labelos_distincts"] forall (A B X Y : point). OS A B X Y => A!=B && A!=X && A!=Y && B!=X && B!=Y.
#between_identity
assert[name "Labelbetween_identity"] forall (A B : point). Bet A B A => A=B.
#par_symmetry
assert[name "Labelpar_symmetry"] forall (A B C D : point). Par A B C D => Par C D A B.
#cong_reflexivity
assert[name "Labelcong_reflexivity"] forall (A B : point). Cong A B A B.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#conga_trans
assert[name "Labelconga_trans"] forall (A B C A1 B1 C1 A2 B2 C2 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A2 B2 C2 => CongA A B C A2 B2 C2.
#not_col_distincts
assert[name "Labelnot_col_distincts"] forall (A B C : point). ~Col A B C => ~Col A B C && A!=B && B!=C && A!=C.
#col_trivial_3
assert[name "Labelcol_trivial_3"] forall (A B : point). Col A B A.
#is_midpoint_id_2
assert[name "Labelis_midpoint_id_2"] forall (A B : point). Midpoint A B A => A=B.
#between_exchange2
assert[name "Labelbetween_exchange2"] forall (A B C D : point). Bet A B D => Bet B C D => Bet A C D.
#col_one_side
assert[name "Labelcol_one_side"] forall (A B C P Q : point). Col A B C => A!=C => OS A B P Q => OS A C P Q.
#l5_2
assert[name "Labell5_2"] forall (A B C D : point). A!=B => Bet A B C => Bet A B D => Bet B C D || Bet B D C.
#one_side_reflexivity
assert[name "Labelone_side_reflexivity"] forall (P Q A : point). ~Col A P Q => OS P Q A A.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#l9_9_bis
assert[name "Labell9_9_bis"] forall (P Q A B : point). OS P Q A B => ~TS P Q A B.
#cong_4321
assert[name "Labelcong_4321"] forall (A B C D : point). Cong A B C D => Cong D C B A.
#col_two_sides
assert[name "Labelcol_two_sides"] forall (A B C P Q : point). Col A B C => A!=C => TS A B P Q => TS A C P Q.
#midpoint_bet
assert[name "Labelmidpoint_bet"] forall (A B C : point). Midpoint B A C => Bet A B C.
#bet_cong_eq
assert[name "Labelbet_cong_eq"] forall (A B C D : point). Bet A B C => Bet A C D => Cong B C A D => C=D && A=B.
#between_inner_transitivity
assert[name "Labelbetween_inner_transitivity"] forall (A B C D : point). Bet A B D => Bet B C D => Bet A B C.
#l11_13
assert[name "Labell11_13"] forall (A B C D E F A1 D1 : point). CongA A B C D E F => Bet A B A1 => A1!=B => Bet D E D1 => D1!=E => CongA A1 B C D1 E F.
#cong_diff_4
assert[name "Labelcong_diff_4"] forall (A B C D : point). D!=C => Cong A B C D => A!=B.
#midpoint_distinct_2
assert[name "Labelmidpoint_distinct_2"] forall (I A B : point). I!=A => Midpoint I A B => A!=B && I!=B.
#one_side_symmetry
assert[name "Labelone_side_symmetry"] forall (P Q A B : point). OS P Q A B => OS P Q B A.
#par_strict_right_comm
assert[name "Labelpar_strict_right_comm"] forall (A B C D : point). Par_strict A B C D => Par_strict A B D C.
#l4_3
assert[name "Labell4_3"] forall (A B C A1 B1 C1 : point). Bet A B C => Bet A1 B1 C1 => Cong A C A1 C1 => Cong B C B1 C1 => Cong A B A1 B1.
#col_permutation_1
assert[name "Labelcol_permutation_1"] forall (A B C : point). Col A B C => Col B C A.
#l9_31
assert[name "Labell9_31"] forall (A X Y Z : point). OS A X Y Z => OS A Z Y X => TS A Y X Z.
#between_trivial2
assert[name "Labelbetween_trivial2"] forall (A B : point). Bet A A B.
#l5_6
assert[name "Labell5_6"] forall (A B C D A1 B1 C1 D1 : point). Le A B C D => Cong A B A1 B1 => Cong C D C1 D1 => Le A1 B1 C1 D1.
#l6_13_1
assert[name "Labell6_13_1"] forall (P A B : point). Out P A B => Le P A P B => Bet P A B.
#l2_11
assert[name "Labell2_11"] forall (A B C A1 B1 C1 : point). Bet A B C => Bet A1 B1 C1 => Cong A B A1 B1 => Cong B C B1 C1 => Cong A C A1 C1.
#cong_right_commutativity
assert[name "Labelcong_right_commutativity"] forall (A B C D : point). Cong A B C D => Cong A B D C.
#col_permutation_3
assert[name "Labelcol_permutation_3"] forall (A B C : point). Col A B C => Col C B A.
#cong_identity
assert[name "Labelcong_identity"] forall (A B C : point). Cong A B C C => A = B.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#invert_one_side
assert[name "Labelinvert_one_side"] forall (A B P Q : point). OS A B P Q => OS B A P Q.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#outer_transitivity_between2
assert[name "Labelouter_transitivity_between2"] forall (A B C D : point). Bet A B C => Bet B C D => B!=C => Bet A C D.
#cong_4312
assert[name "Labelcong_4312"] forall (A B C D : point). Cong A B C D => Cong D C A B.
#col_transitivity_1
assert[name "Labelcol_transitivity_1"] forall (P Q A B : point). P!=Q => Col P Q A => Col P Q B => Col P A B.
#mid_preserves_col
assert[name "Labelmid_preserves_col"] forall (A B C M A1 B1 C1 : point). Col A B C => Midpoint M A A1 => Midpoint M B B1 => Midpoint M C C1 => Col A1 B1 C1.
#l7_9
assert[name "Labell7_9"] forall (P Q A X : point). Midpoint A P X => Midpoint A Q X => P=Q.
#segment_construction
assert[name "Labelsegment_construction"] forall (A B C D : point). exists (E :point). Bet A B E && Cong B E C D.
#l7_15
assert[name "Labell7_15"] forall (P Q R P1 Q1 R1 A : point). Midpoint A P P1 => Midpoint A Q Q1 => Midpoint A R R1 => Bet P Q R => Bet P1 Q1 R1.
#between_trivial
assert[name "Labelbetween_trivial"] forall (A B : point). Bet A B B.
#cong_left_commutativity
assert[name "Labelcong_left_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A C D.
#not_col_permutation_1
assert[name "Labelnot_col_permutation_1"] forall (A B C : point). ~Col A B C => ~Col B C A.
#bet_col
assert[name "Labelbet_col"] forall (A B C : point). Bet A B C => Col A B C.
#par_strict_not_col_1
assert[name "Labelpar_strict_not_col_1"] forall (A B C D : point). Par_strict A B C D => ~Col A B C.
#l7_9_bis
assert[name "Labell7_9_bis"] forall (P Q A X : point). Midpoint A P X => Midpoint A X Q => P=Q.
#l9_8_2
assert[name "Labell9_8_2"] forall (P Q A B C : point). TS P Q A C => OS P Q A B => TS P Q B C.
#cong_commutativity
assert[name "Labelcong_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A D C.
#between_exchange4
assert[name "Labelbetween_exchange4"] forall (A B C D : point). Bet A B C => Bet A C D => Bet A B D.
#bet_neq21__neq
assert[name "Labelbet_neq21__neq"] forall (A B C : point). Bet A B C => B!=A=>A!=C.
#par_strict_not_col_3
assert[name "Labelpar_strict_not_col_3"] forall (A B C D : point). Par_strict A B C D => ~Col C D A.
#col_trivial_2
assert[name "Labelcol_trivial_2"] forall (A B : point). Col A B B.
#par_col_par_2
assert[name "Labelpar_col_par_2"] forall (A B C D P : point). A!=P => Col A B P => Par A B C D => Par A P C D.
#one_or_two_sides
assert[name "Labelone_or_two_sides"] forall (A B X Y : point). ~Col X A B => ~Col Y A B => TS A B X Y || OS A B X Y.
#l12_17
assert[name "Labell12_17"] forall (A B C D P : point). A!=B => Midpoint P A C => Midpoint P B D => Par A B C D.
#l11_22b
assert[name "Labell11_22b"] forall (A B C P A1 B1 C1 P1 : point). OS B P A C && OS B1 P1 A1 C1 && CongA A B P A1 B1 P1 && CongA P B C P1 B1 C1 => CongA A B C A1 B1 C1.
#l7_13
assert[name "Labell7_13"] forall (A P Q P1 Q1 : point). Midpoint A P1 P => Midpoint A Q1 Q => Cong P Q P1 Q1.
#l7_17
assert[name "Labell7_17"] forall (P P1 A B : point). Midpoint A P P1 => Midpoint B P P1 => A=B.
#one_side_transitivity
assert[name "Labelone_side_transitivity"] forall (P Q A B C : point). OS P Q A B => OS P Q B C => OS P Q A C.
#par_strict_par
assert[name "Labelpar_strict_par"] forall (A B C D : point). Par_strict A B C D => Par A B C D.
#not_col_permutation_5
assert[name "Labelnot_col_permutation_5"] forall (A B C : point). ~Col A B C => ~Col A C B.
#cong2_conga_cong
assert[name "Labelcong2_conga_cong"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => Cong A B A1 B1 => Cong B C B1 C1 => Cong A C A1 C1.
rewrite[name "LabelParallelogram_strict"] forall (A B A1 B1 : point). Parallelogram_strict A B A1 B1 <=> TS A A1 B B1 && Par A B A1 B1 && Cong A B A1 B1.
rewrite[name "LabelOpp"] forall (O E E1 A B : point). Opp O E E1 A B <=> Sum O E E1 B A O.
rewrite[name "LabelParallelogram_flat"] forall (A B A1 B1 : point). Parallelogram_flat A B A1 B1 <=> Col A B A1 && Col A B B1 && Cong A B A1 B1 && Cong A B1 A1 B && (A != A1 || B != B1).
rewrite[name "LabelTS"] forall (A B P Q : point). TS A B P Q <=> ~(Col P A B) && ~(Col Q A B) && (exists (T : point). Col T A B && Bet P T Q).
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
rewrite[name "LabelDiff"] forall (O E E1 A B C : point). Diff O E E1 A B C <=> (exists (B1 : point). Opp O E E1 B B1 && Sum O E E1 A B1 C).
rewrite[name "LabelPlg"] forall (A B C D : point). Plg A B C D <=> (A != C || B != D) && (exists (M : point). Midpoint M A C && Midpoint M B D).
rewrite[name "LabelParallelogram_strict"] forall (A B A1 B1 : point). Parallelogram_strict A B A1 B1 <=> TS A A1 B B1 && Par A B A1 B1 && Cong A B A1 B1.
rewrite[name "LabelCong_3"] forall (A B C A1 B1 C1 : point). Cong_3 A B C A1 B1 C1 <=> Cong A B A1 B1 && Cong A C A1 C1 && Cong B C B1 C1.
rewrite[name "LabelOut"] forall (P A B : point). Out P A B <=> A != P && B != P && (Bet P A B || Bet P B A).
rewrite[name "LabelOS"] forall (A B P Q : point). OS A B P Q <=> (exists (R : point). TS A B P R && TS A B Q R).
rewrite[name "LabelParallelogram"] forall (A B A1 B1 : point). Parallelogram A B A1 B1 <=> Parallelogram_strict A B A1 B1 || Parallelogram_flat A B A1 B1.
rewrite[name "LabelTS"] forall (A B P Q : point). TS A B P Q <=> ~(Col P A B) && ~(Col Q A B) && (exists (T : point). Col T A B && Bet P T Q).
rewrite[name "LabelMidpoint"] forall (M A B : point). Midpoint M A B <=> Bet A M B && Cong A M M B.
rewrite[name "LabelPar_strict"] forall (A B C D : point). Par_strict A B C D <=> A != B && C != D && Coplanar A B C D && ~(exists (X : point). Col X A B && Col X C D).
rewrite[name "LabelParallelogram_flat"] forall (A B A1 B1 : point). Parallelogram_flat A B A1 B1 <=> Col A B A1 && Col A B B1 && Cong A B A1 B1 && Cong A B1 A1 B && (A != A1 || B != B1).
rewrite[name "LabelLe"] forall (A B C D : point). Le A B C D <=> (exists (E : point). (Bet C E D && Cong A B C E)).
rewrite[name "LabelPar"] forall (A B C D : point). Par A B C D <=> Par_strict A B C D || (A != B && C != D && Col A C D && Col B C D).
goal forall (O E E1 A B S : point). Diff O E E1 S A B => Sum O E E1 A B S.