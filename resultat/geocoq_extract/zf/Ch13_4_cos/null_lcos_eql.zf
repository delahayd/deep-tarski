include "../tarski_term_def.zf".
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#out_col
assert[name "Labelout_col"] forall (A B C : point). Out A B C => Col A B C.
#col_permutation_2
assert[name "Labelcol_permutation_2"] forall (A B C : point). Col A B C => Col C A B.
#l8_9
assert[name "Labell8_9"] forall (A B C : point). Per A B C => Col A B C => (A=B || C=B).
#all_eql
assert[name "Labelall_eql"] forall (A B : point) (l1 l2 : point->point->prop). Len A B l1 => Len A B l2 => EqL l1 l2.
rewrite[name "LabelOut"] forall (P A B : point). Out P A B <=> A != P && B != P && (Bet P A B || Bet P B A).
rewrite[name "LabelLcos"] forall (lb lc : point->point->prop) (a : point->point->point->prop). Lcos lb lc a <=> Q_Cong lb && Q_Cong lc && Q_CongA_Acute a && (exists (A B C : point). (Per C B A && lb A B && lc A C && a B A C)).
rewrite[name "LabelQ_CongA_Null_Acute"] forall (a : point->point->point->prop). Q_CongA_Null_Acute a <=> Q_CongA_Acute a && (forall (A B C : point). a A B C => Out B A C).
goal forall (lp l : point->point->prop) (a : point->point->point->prop). Lcos lp l a => Q_CongA_Null_Acute a => EqL l lp.