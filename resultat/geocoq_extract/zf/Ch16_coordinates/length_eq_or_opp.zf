include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#diff_ar2
assert[name "Labeldiff_ar2"] forall (O E E1 A B AMB : point). Diff O E E1 A B AMB => Ar2 O E E1 A B AMB.
#l16_9_1
assert[name "Labell16_9_1"] forall (O E E1 X Y XY XMY : point). Col O E X => Col O E Y => Is_length O E E1 X Y XY => LeP O E E1 Y X => Diff O E E1 X Y XMY => XY=XMY.
#length_sym
assert[name "Labellength_sym"] forall (O E E1 A B AB : point).Length O E E1 A B AB => Length O E E1 B A AB.
#diff_exists
assert[name "Labeldiff_exists"] forall (O E E1 A B : point). ~Col O E E1 => Col O E A => Col O E B => (exists (D : point). Diff O E E1 A B D).
#col_2_le_or_ge
assert[name "Labelcol_2_le_or_ge"] forall (O E E1 A B : point). ~Col O E E1 => Col O E A => Col O E B => LeP O E E1 A B || LeP O E E1 B A.
#diff_opp
assert[name "Labeldiff_opp"] forall (O E E1 A B AmB BmA : point). Diff O E E1 A B AmB => Diff O E E1 B A BmA => Opp O E E1 AmB BmA.
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
goal forall (O E E1 A B L1 L2 : point). Length O E E1 A B L1 => Diff O E E1 A B L2 => L1=L2 || Opp O E E1 L1 L2.