include "../tarski_term_def.zf".
val O : point.
val E : point.
val E1 : point.
assert ~Col O E E1.
#grid_not_par
assert[name "Labelgrid_not_par"] ~Par O E E E1 && ~Par O E O E1 && ~Par O E1 E E1 && O!=E && O!=E1 && E!=E1.
#sum_y_axis_change
assert[name "Labelsum_y_axis_change"] forall (O E E1 E2 A B C : point). Sum O E E1 A B C => ~Col O E E2 => Sum O E E2 A B C.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#pj_uniqueness
assert[name "Labelpj_uniqueness"] forall (O E E1 A A1 A2 : point). ~Col O E E1 => Col O E A => Col O E1 A1 => Col O E1 A2 => Pj E E1 A A1 => Pj E E1 A A2 => A1=A2.
#prod_uniqueness
assert[name "Labelprod_uniqueness"] forall (A B C1 C2 : point). Prod O E E1 A B C1 => Prod O E E1 A B C2 => C1=C2.
#prod_0_l
assert[name "Labelprod_0_l"] forall (O E E1 A B C APC BPC : point). LeP O E E1 A B => Sum O E E1 A C APC => Sum O E E1 B C BPC => LeP O E E1 APC BPC.
#sum_x_axis_unit_change
assert[name "Labelsum_x_axis_unit_change"] forall (O E E1 U A B C : point). Sum O E E1 A B C => Col O E U => U!=O => Sum O U E1 A B C.
#proj_preserves_sum
assert[name "Labelproj_preserves_sum"] forall (O E E1 A B C A1 B1 C1 : point). Sum O E E1 A B C => Ar1 O E1 A1 B1 C1 => Pj E E1 A A1 => Pj E E1 B B1 => Pj E E1 C C1 => Sum O E1 E A1 B1 C1.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#sum_O_O
assert[name "Labelsum_O_O"] Sum O E E1 O O O.
rewrite[name "LabelSum"] forall (O E E1 A B C : point). Sum O E E1 A B C <=> Ar2 O E E1 A B C && (exists (A1 C1 : point). Pj E E1 A  A1 && Col O E1 A1 && Pj O E  A1 C1 && Pj O E1 B  C1 && Pj E1 E C1 C).
rewrite[name "LabelProd"] forall (O E E1 A B C : point). Prod O E E1 A B C <=> Ar2 O E E1 A B C && (exists (B1 : point). Pj E E1 B B1 && Col O E1 B1 && Pj E1 A B1 C).
rewrite[name "LabelAr2"] forall (O E E1 A B C : point). Ar2 O E E1 A B C <=> ~ Col O E E1 && Col O E A && Col O E B && Col O E C.
goal forall (O E E1 A : point). ~Col O E E1 => Col O E A => Prod O E E1 A O O.