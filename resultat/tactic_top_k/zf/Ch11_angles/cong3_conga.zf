include "../rew_type.zf".
rewrite[name "LabelCong_3"] forall (A B C A1 B1 C1 : point). Cong_3 A B C A1 B1 C1 <=> Cong A B A1 B1 && Cong A C A1 C1 && Cong B C B1 C1.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#cong3_diff
assert[name "Labelcong3_diff"] forall (A B C A1 B1 C1 : point). A!=B => Cong_3 A B C A1 B1 C1 => A1!=B1.
#cong3_diff2
assert[name "Labelcong3_diff2"] forall (A B C A1 B1 C1 : point). B!=C => Cong_3 A B C A1 B1 C1 => B1!=C1.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#conga_sym
assert[name "Labelconga_sym"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A B C.
#l11_3_bis
assert[name "Labell11_3_bis"] forall (A B C D E F : point). (exists (A1 C1 D1 F1 : point). Out B A1 A && Out B C1 C && Out E D1 D && Out E F1 F && Cong_3 A1 B C1 D1 E F1) => CongA A B C D E F.
#l6_6
assert[name "Labell6_6"] forall (P A B : point). Out P A B => Out P B A.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
goal forall (A B C A1 B1 C1 : point). A!=B => C!=B => Cong_3 A B C A1 B1 C1 => CongA A B C A1 B1 C1.