include "../rew_type.zf".
rewrite[name "LabelOut"] forall (P A B : point). Out P A B <=> A != P && B != P && (Bet P A B || Bet P B A).
rewrite[name "LabelPer"] forall (A B C : point). Per A B C <=> (exists (C1 : point). Midpoint B C C1 && Cong A C A C1).
rewrite[name "LabelPerp_at"] forall (X A B C D : point). Perp_at X A B C D <=> A != B && C != D && Col X A B && Col X C D && (forall (U V : point). Col U A B => Col V C D => Per U X V).
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#between_trivial2
assert[name "Labelbetween_trivial2"] forall (A B : point). Bet A A B.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
#le_trivial
assert[name "Labelle_trivial"] forall (A C D : point). Le A A C D.
#not_and_lt
assert[name "Labelnot_and_lt"] forall (A B C D : point). ~(Lt A B C D && Lt C D A B).
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#par_id
assert[name "Labelpar_id"] forall (A B C : point). Par A B A C => Col A B C.
#perp_per_1
assert[name "Labelperp_per_1"] forall (A B C : point). Perp A B C A => Per B A C.
#perp_right_comm
assert[name "Labelperp_right_comm"] forall (A B C D : point). Perp A B C D => Perp A B D C.
goal forall (A B C : point). Perp A B A C => Per B A C.