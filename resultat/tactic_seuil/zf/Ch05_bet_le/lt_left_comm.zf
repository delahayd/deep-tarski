include "../rew_type.zf".
rewrite[name "LabelLe"] forall (A B C D : point). Le A B C D <=> (exists (E : point). (Bet C E D && Cong A B C E)).
rewrite[name "LabelLt"] forall (A B C D : point). Lt A B C D <=> Le A B C D && ~ Cong A B C D.
rewrite[name "LabelPar_strict"] forall (A B C D : point). Par_strict A B C D <=> A != B && C != D && Coplanar A B C D && ~(exists (X : point). Col X A B && Col X C D).
rewrite[name "LabelPerp"] forall (A B C D : point). Perp A B C D <=> (exists (X : point). Perp_at X A B C D).
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#cong_inner_transitivity
assert[name "Labelcong_inner_transitivity"] forall (A B C D E F : point). Cong A B C D => Cong A B E F => Cong C D E F.
#cong_pseudo_reflexivity
assert[name "Labelcong_pseudo_reflexivity"] forall (A B : point). Cong A B B A.
#le_right_comm
assert[name "Labelle_right_comm"] forall (A B C D : point). Le A B C D => Le A B D C.
#lt_right_comm
assert[name "Labellt_right_comm"] forall (A B C D : point). Lt A B C D => Lt A B D C.
#perp_not_eq_1
assert[name "Labelperp_not_eq_1"] forall (A B C D : point). Perp A B C D => A!=B.
goal forall (A B C D : point). Lt A B C D => Lt B A C D.